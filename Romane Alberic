"""
Romane COUEDEL - Alberic FASQUELLE
Programmee pour dessiner des pointss et des triangles,
avec des méthodes pour les manipuler et les afficher.
"""

import math
import matplotlib.pyplot as plt

class Point:
    """
    Cette classe représente un point dans un espace 2D, avec des coordonnées x et y,
    ainsi qu'une couleur associée.
    """
    def __init__(self, x=0, y=0, couleur='black'):
        self.x = x
        self.y = y
        self.couleur = couleur

    def __str__(self):
        return f"X: {self.x}, Y: {self.y}, Couleur:{self.couleur}"

    def dessiner(self):
        """Dessine point sur matplot"""
        plt.plot([self.x], [self.y], marker='o', color=self.couleur)

class Vecteur:
    """
    Cette classe représente un vecteur dans un espace 2D, avec des coordonnées x et y,
    ainsi qu'une couleur associée.
    """
    def __init__(self, x, y, couleur="black"):
        self.x = x
        self.y = y
        self.couleur = couleur

    def __str__(self):
        return f"X: {self.x}, Y: {self.y}, Couleur:{self.couleur}"

    def __add__(self, vecteur):
        if isinstance(vecteur, Vecteur):
            return Vecteur(self.x + vecteur.x, self.y + vecteur.y)
        raise TypeError("Addition uniquement avec des vecteurs")

    def __sub__(self, vecteur):
        if isinstance(vecteur, Vecteur):
            return Vecteur(self.x - vecteur.x, self.y - vecteur.y)
        raise TypeError("Soustraction uniquement avec des vecteurs")

    def __mul__(self, scalar):
        if isinstance(scalar, int):
            return Vecteur(self.x * scalar, self.y * scalar)
        raise TypeError("Multiplication uniquement par un scalaire")

    def __truediv__(self, scalar):
        if isinstance(scalar, int) and scalar != 0:
            return Vecteur(self.x / scalar, self.y / scalar)
        raise ValueError("Division par zéro ou par un type non valide")

    def afficher(self):
        """Print"""
        print(self)

class Triangle(Point):
    """
    Cette classe représente un triangle dans un espace 2D, avec des coordonnées x et y,
    ainsi qu'une couleur associée.
    """
    def __init__(self, p1, p2, p3, couleur="black"):
        super().__init__([p1, p2, p3], couleur)
        self.points = [p1, p2, p3]
        self.couleur = couleur

    def tourner(self, angle):
        """Fait tourner le triangle d'un angle donné"""
        self.points[0] = self.rotation_point(self.points[0], angle)
        self.points[1] = self.rotation_point(self.points[1], angle)
        self.points[2] = self.rotation_point(self.points[2], angle)

    def rotation_point(self, point, angle):
        """Fait tourner un point autour de l'origine d'un angle donné"""
        x_nouveau = point.x * math.cos(angle) - point.y * math.sin(angle)
        y_nouveau = point.x * math.sin(angle) + point.y * math.cos(angle)
        return Point(x_nouveau, y_nouveau, point.couleur)

    def translation(self, vecteur):
        """Translate le triangle par un vecteur donné"""
        self.points[0] = self.translation_point(self.points[0], vecteur)
        self.points[1] = self.translation_point(self.points[1], vecteur)
        self.points[2] = self.translation_point(self.points[2], vecteur)

    def translation_point(self, point, vecteur):
        """Déplace un point par un vecteur donné"""
        x_nouveau = point.x + vecteur.x
        y_nouveau = point.y + vecteur.y
        return Point(x_nouveau, y_nouveau, point.couleur)

    def __str__(self):
        return (f"Triangle: \n p1 [{self.points[0].x},{self.points[0].y}] \n "
                f"p2 [{self.points[1].x},{self.points[1].y}] \n "
                f"p3 [{self.points[2].x},{self.points[2].y}]")

    def afficher(self):
        """Print"""
        print(self)

    def dessine(self):
        """Dessine sur Matplot"""
        # Récupère les coordonnées des points
        x_coords = [self.points[0].x, self.points[1].x, self.points[2].x, self.points[0].x]
        y_coords = [self.points[0].y, self.points[1].y, self.points[2].y, self.points[0].y]
        # Trace le triangle
        plt.fill(x_coords, y_coords, color=self.couleur, alpha=0.5)
        plt.plot(x_coords, y_coords, color='black')  # Trace les bords


##### MAIN ####
print(Point())
print(Point(9, 8, 'red'))
print(Vecteur(0, 1) + Vecteur(1, 0))
print(Vecteur(0, 1) - Vecteur(1, 0))
print(Vecteur(1, -1) * 3)
print(Vecteur(15, -15) / 3)

Vecteur.afficher(Vecteur(2, 7, 'blue'))

pt1 = Point(1, 0, "red")
pt2 = Point(2, 1, "red")
pt3 = Point(1, 3, "red")
pt1.dessiner()
pt2.dessiner()
pt3.dessiner()
triangle = Triangle(pt1, pt2, pt3, "blue")

print("Triangle avant rotation:")
triangle.afficher()
triangle.dessine()

triangle.tourner(math.pi / 2)

print("Triangle après rotation:")
triangle.afficher()
triangle.dessine()

print("Triangle après translation")
vecteur_translation = Point(2, 3)
triangle.translation(vecteur_translation)  # Déplacer le triangle selon un vecteur (2, 3)
triangle.afficher()
triangle.dessine()

##### Pour l'affichage sur le matplot #####
plt.xlim(-10, 10)  # Limites de l'axe x
plt.ylim(-10, 10)  # Limites de l'axe y
plt.axhline(0, color='black', linewidth=0.5, ls='--')  # Ligne horizontale
plt.axvline(0, color='black', linewidth=0.5, ls='--')  # Ligne verticale
plt.grid(color='gray', linestyle='--', linewidth=0.5)  # Grille
plt.title("Dessin final")
plt.gca().set_aspect('equal', adjustable='box')  # Égalité des axes
plt.show()

